//+------------------------------------------------------------------+
//|                                                   CD_Example.mq4 |
//|                                  Copyright 2023, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

#property indicator_separate_window
#property indicator_buffers 2

#property indicator_type1 DRAW_HISTOGRAM
#property indicator_color1 clrGreen
#property indicator_width1 3

#property indicator_type2 DRAW_HISTOGRAM
#property indicator_color2 clrRed
#property indicator_width2 3

input int bars_calc = 500;

double cDeltaUp[], cDeltaDown[];

int OnInit()
{
  ArrayResize(cDeltaUp, bars_calc);
  ArrayInitialize(cDeltaUp, 0);

  ArrayResize(cDeltaDown, bars_calc);
  ArrayInitialize(cDeltaDown, 0);

  IndicatorBuffers(2);

  SetIndexBuffer(0,cDeltaUp,INDICATOR_DATA);
  SetIndexStyle(0,DRAW_HISTOGRAM,STYLE_SOLID,3,clrGreen);

  SetIndexBuffer(1,cDeltaDown,INDICATOR_DATA);
  SetIndexStyle(1,DRAW_HISTOGRAM,STYLE_SOLID,3,clrRed);

  ArraySetAsSeries(cDeltaUp,true);
  ArraySetAsSeries(cDeltaDown,true);

  return(INIT_SUCCEEDED);
}

int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{ 
    Calculate();

    return(rates_total);
}

void Calculate()
{
  int remainingBarsToCalculate = WriteLastWithoutCalculation();

  for(int i = remainingBarsToCalculate; i > 0; i--)
  {
    double delta = iCustom(NULL, 0, "ClusterDelta_#Delta", "", "AUTO", "AUTO", 0, i);

    double cDeltaFromPreviousBar = cDeltaUp[i+1];

    if (cDeltaFromPreviousBar == 0)
    {
      cDeltaFromPreviousBar = cDeltaDown[i+1];
    }

    double cDelta = cDeltaFromPreviousBar + delta;

    WriteToArray(i, cDelta);
  };
}

int WriteLastWithoutCalculation()
{
  int lastIndex = bars_calc-1;
  WriteToArray(lastIndex, iCustom(NULL, 0, "ClusterDelta_#Delta", "", "AUTO", "AUTO", 0, bars_calc));

  return lastIndex - 1;
}

void WriteToArray(int index, double cDelta)
{
  if (cDelta > 0)
  {
    cDeltaUp[index] = cDelta;
    return;
  }

  cDeltaDown[index] = cDelta;
}
